' 4b_4: Wittek (297473), W¹torska (297469), Rabajczyk (286498)
@startuml
' TODO

' --------

' ==== < CONFIGURATION > ====

hide empty members
hide <<function>> circle

' ==== END of < CONFIGURATION > ====

package "Factory Package" {

	class NodeCollection<Node> << (T,olive) >> {
		- nodes: std::list<Node>
		+ getNodes() const : std::list<Node> {query}
		+ cbegin() const : std::list<Node>::const_iterator {query}
		+ cendt() const : std::list<Node>::const_iterator {query}
		+ begin() const :std::list<Node>::iterator {query}
		+ begin() const : std::list<Node>::const_iterator {query}
		+ end() const : std::list<Node>::iterator {query}
		+ end() const : std::list<Node>::const_iterator {query}
		+ add(const node: Node&) : void
		+ findById(nodeId: ElementID) const : iterator {query}
		+ findById(nodeId: ElementID) const : const_iterator {query}
		+ removeById(nodeID : ElementID) : void
	}

	Ramps ..|> NodeCollection : <<bind>> <Node->Ramp>
	Workers ..|> NodeCollection : <<bind>> <Node->Worker>
	Storehouses ..|> NodeCollection : <<bind>> <Node->Storehouse>

	class Factory {
		-_ramps : NodeCollection<Ramp>
		-_workers: NodeCollection<Worker>
		-_storehouses: NodeCollection<Storehouse>
		+ Factory(ramps : NodeCollection<Ramp>,
			  workers: NodeCollection<Worker>,
			  storehouses: NodeCollection<Storehouse>)
		+ add_worker(const worker : Worker&) : void
		+ add_ramp(const ramp : Ramp&) : void
		+ add_storehouse(const storehouse : Storehouse&) : void
		+ isCompatible() const : bool {query}
		+ findById(nodeId: ElementID) const : const_iterator {query}
		- removeById(nodeID : ElementID) : void
	}
	Factory *-- Ramps
	Factory *-- Workers
	Factory *-- Storehouses

}
' == END of package "Factory"

package "Report Generation" {

	interface IReportNotifier <<interface>> {
	}

	class SpecificTurnsReportNotifier {
	}
	SpecificTurnsReportNotifier .. IReportNotifier

	class IntervalReportNotifier {
	}
	IntervalReportNotifier .. IReportNotifier 

	class Reporting <<function>> {
		generate_structure_report(?)
		generate_simulation_turn_report(?)
	}

}
' == END of package "Report Generation"

class Simulation <<function>> {
	simulate(?)
}
Simulation ..> Factory : uses
Reporting .. Simulation
IReportNotifier .. Simulation


package "Storage" {

	interface IPackageStockpile <<interface>> {
	} 

	interface IPackageQueue <<interface>> {
	} 
	IPackageQueue .. IPackageStockpile

	enum QueueType <<enumeration>> {
	}
	QueueType .. IPackageQueue

	class PackageQueue {
	}
	PackageQueue .. IPackageQueue

	class Package {
	- {static}maxID : ElementID
	- package_id : ElementID
	+ Package()
	+ getPackageId() const : ElementID {query}
	}

}
' == END of package "Storage"


package "Nodes" {

	interface IPackageReceiver <<interface>> {
	}

	enum ReceiverType <<enumeration>> {
	}
	IPackageReceiver .. ReceiverType


	class ReceiverPreferences {
	}


	class PackageSender {
	}

	PackageSender .. ReceiverPreferences

	class Ramp {
 	+ Ramp(nodeId : ElementID)
	+ generatePackage() const : void
	- _nodeId : ElementID
	}

	Ramp .. PackageSender


	class Worker {
	+ Worker(package_queue: std::unique_ptr <Package>, nodeId :ElementID)
	+ processPackage() : void
	+ receivePackage(const package : Package&) : void
        + identifyReceiver() const : tuple<ReceiverType, ElementID> {query}
        + cbegin() const : deque<Package>::const_iterator {query}
        + cend() const : deque<Package>::const_iterator {query}
        + begin() const : deque<Package>::iterator {query}
        + end() const : deque<Package>::iterator {query}
	+ popPackage() : Package
        + returnQueueType() const : QueueType {query}
	- _package_queue : std::unique_ptr <Package>
	- _nodeId : ElementID
	}

	Worker .. PackageSender
	Worker .. IPackageReceiver
	IPackageQueue .. Worker

	class Storehouse {
	+ Storehouse(package_stockpile : std::unique_ptr, nodeId : ElementID)
	+ receivePackage(const package : Package&) : void
	+ identifyReceiver() const : tuple<ReceiverType, ElementID> {query}
        + cbegin() const : deque<Package>::const_iterator {query}
        + cend() const : deque<Package>::const_iterator {query}
        + begin() const : deque<Package>::iterator {query}
        + end() const : deque<Package>::iterator {query}  
	- _package_stockpile : std::unique_ptr
	- _nodeId : ElementID
	}

	Storehouse .. IPackageReceiver
	IPackageStockpile .. Storehouse

	Ramp -[hidden]> Worker
	Worker -[hidden]> Storehouse

	' == POSITIONING ==
	PackageSender -[hidden]> IPackageReceiver
	' == END of POSITIONING ==
}
' == END of package "Nodes"


' .. HELPERS ----

' .. DATA TYPES --
together {
	class Time << (T,orchid) primitive>>
	class TimeOffset << (T,orchid) primitive>>
	class ElementID << (T,orchid) primitive>>
	class ProbabilityGenerator << (T,orchid) primitive>>

	Time -[hidden]> TimeOffset
	TimeOffset -[hidden]> ElementID
	ElementID -[hidden]> ProbabilityGenerator
}

class IO <<function>> {
	load_factory_structure(?)
	save_factory_structure(?)
}

' == END of together


' ==== < POSITIONING > ====

IO <-[hidden]- IntervalReportNotifier
Time <-[hidden]- Package

ReceiverPreferences <-[hidden]- IPackageStockpile

IPackageStockpile -[hidden]-> Storehouse

"Factory Package" +- "Nodes"

IReportNotifier -[hidden]> Reporting

' ==== END of < POSITIONING > ====
@enduml
' 4b_4: Wittek (297473), W¹torska (297469), Rabajczyk (286498)
